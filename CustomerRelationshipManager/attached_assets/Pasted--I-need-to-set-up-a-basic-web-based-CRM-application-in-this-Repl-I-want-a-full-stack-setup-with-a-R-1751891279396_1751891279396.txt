"I need to set up a basic web-based CRM application in this Repl. I want a full-stack setup with a React frontend and a Node.js (Express.js) backend. The database will eventually be PostgreSQL, but for now, the backend should just return mock data.

Please set up the project with the following structure and initial code:

Overall Project Structure:

    A server/ directory for the Node.js backend.

    A client/ directory for the React frontend.

Backend (server/ directory):

    Initialize a Node.js project: Create server/package.json and install express and cors.

    server/index.js:

        Set up a basic Express.js server.

        Configure cors to allow requests from the React frontend (e.g., http://localhost:3000 during local React development within Replit, and eventually the deployed React app).

        Serve Static Files: Configure Express to serve static files from ../client/build (this build directory will be created when the React app is built).

        Placeholder API Endpoints (return mock data):

            GET /api/clients: Returns an array of mock client objects. Each client object should include: id, name, lastContacted, contacts (array of mock contact objects), and machines (array of mock machine objects).

            GET /api/clients/:id: Returns a single mock client object based on ID.

            GET /api/reminders/overdue: Returns an array of mock overdue reminder objects (e.g., id, type, clientName, dueDate).

            GET /api/reminders/upcoming-monthly: Returns an array of mock upcoming monthly reminder objects (e.g., id, type, clientName, dueDate).

            Include comments explaining where database logic would go.

Frontend (client/ directory):

    Create a React App: Use create-react-app to scaffold a new React project inside the client/ directory.

    client/src/App.js:

        Main Layout: Implement the main page layout as described:

            A dashboard section at the top.

            A scrollable client list section below the dashboard.

        Dashboard Component (or section):

            Fetch mock overdue follow-ups from /api/reminders/overdue and display them.

            Fetch mock upcoming monthly reminders from /api/reminders/upcoming-monthly and display them.

            Use simple div elements or cards for display.

        Client List Component (or section):

            Fetch mock clients from /api/clients and display them as a list (e.g., <ul> or divs).

            Each client item should be clickable.

        Client Detail Page/Component:

            When a client is clicked, display a detailed view for that client. This can be a separate route or a conditional render on the same page.

            This view should fetch the specific client's data from /api/clients/:id.

            Display the client's name and last contacted date.

            Display a list of all machines owned by that client (from the client's data). Each machine should show: Serial Number, Model Name, Purchase Date, Warranty Status, AMC Status & Validity, Machine Last Contacted, Insurance Validity.

            Display a list of all contact people at the company (from the client's data). Each contact should show: Name, Position.

        Forms for New Entries:

            Include basic placeholder forms (e.g., a button that, when clicked, shows a simple input field and a "Save" button) for:

                Adding a new Client.

                Adding a new Machine (linked to a client).

                Adding a new Contact Person (linked to a client).

            These forms don't need to send data to the backend yet, just show the UI.

        Basic Styling: Use Tailwind CSS or simple inline styles/CSS for a clean, readable layout. Ensure responsiveness for mobile viewing.

Replit Configuration (.replit file):

    Configure the run command to start the Node.js backend server (e.g., node server/index.js).

    Add a start script in client/package.json and a build script.

    Provide instructions on how to run the React development server (e.g., cd client && npm start in the shell) and how to build the React app (cd client && npm run build).

Mock Data:

    Generate realistic-looking mock data for clients, contacts, machines, overdue reminders, and upcoming reminders to populate the initial UI.

Please provide all necessary package.json files, index.js (for server), App.js (for client), and any other essential files to get this basic structure running."

